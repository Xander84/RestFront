/******************************************************************************/
/***          Generated by IBExpert 2010.11.05 15.08.2011 22:13:58          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'D:\Front\FRONT_LOG.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 8192
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN DBLOBTEXT80 AS
BLOB SUB_TYPE 1 SEGMENT SIZE 80;

CREATE DOMAIN DCURRENCY AS
DECIMAL(15,4);

CREATE DOMAIN DEDITIONDATE AS
TIMESTAMP
DEFAULT CURRENT_TIMESTAMP
;

CREATE DOMAIN DFOREIGNKEY AS
INTEGER;

CREATE DOMAIN DINTEGER_NOTNULL AS
INTEGER
NOT NULL;

CREATE DOMAIN DINTKEY AS
INTEGER
NOT NULL
CHECK (VALUE > 0);

CREATE DOMAIN DNAME AS
VARCHAR(60)
NOT NULL
COLLATE PXW_CYRL;

CREATE DOMAIN DTEXT40 AS
VARCHAR(40)
COLLATE PXW_CYRL;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GD_G_UNIQUE;
SET GENERATOR GD_G_UNIQUE TO 102;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE GD_ACTIONLOG (
    ID            DINTKEY NOT NULL,
    USERKEY       DFOREIGNKEY,
    DESCRIPTION   DBLOBTEXT80,
    EDITIONDATE   DEDITIONDATE,
    COMPUTERNAME  DTEXT40
);

CREATE TABLE GD_CHECKLOG (
    ID           DINTKEY NOT NULL,
    ORDERKEY     DFOREIGNKEY,
    GOODKEY      DFOREIGNKEY,
    QUANTITY     DCURRENCY,
    COSTNCU      DCURRENCY,
    SUMNCU       DCURRENCY,
    SUMDISCOUNT  DCURRENCY
);

CREATE TABLE GD_EVENT (
    ID         DINTKEY NOT NULL,
    EVENTNAME  DNAME
);

CREATE TABLE GD_EVENTLOG (
    ID            DINTKEY NOT NULL,
    USERKEY       DFOREIGNKEY,
    EVENTKEY      DFOREIGNKEY,
    EDITIONDATE   DEDITIONDATE,
    ORDERKEY      DFOREIGNKEY,
    GOODLOGKEY    DFOREIGNKEY,
    COMPUTERNAME  DTEXT40,
    CHECKLOGKEY   DFOREIGNKEY,
    DESCRIPTION   DBLOBTEXT80,
    SUMM          DCURRENCY
);

CREATE TABLE GD_GOOD (
    ID        DINTKEY NOT NULL,
    GOODNAME  DNAME,
    GOODKEY   DINTEGER_NOTNULL
);

CREATE TABLE GD_GOODLOG (
    ID        DINTKEY NOT NULL,
    GOODKEY   DFOREIGNKEY,
    SUMM      DCURRENCY,
    QUANTITY  DCURRENCY
);

CREATE TABLE GD_ORDER (
    ID        DINTKEY NOT NULL,
    NUMBER    DNAME,
    ORDERKEY  DINTEGER_NOTNULL
);

CREATE TABLE GD_USER (
    ID        DINTKEY NOT NULL,
    USERNAME  DTEXT40,
    USERKEY   DINTEGER_NOTNULL
);



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE GD_ACTIONLOG ADD CONSTRAINT PK_GD_ACTIONLOG PRIMARY KEY (ID);
ALTER TABLE GD_CHECKLOG ADD CONSTRAINT PK_GD_CHECKLOG PRIMARY KEY (ID);
ALTER TABLE GD_EVENT ADD CONSTRAINT GD_PK_EVENT PRIMARY KEY (ID);
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT GD_PK_EVENTLOG PRIMARY KEY (ID);
ALTER TABLE GD_GOOD ADD CONSTRAINT GD_PK_GOOD PRIMARY KEY (ID);
ALTER TABLE GD_GOODLOG ADD CONSTRAINT GD_PK_GOODLOG PRIMARY KEY (ID);
ALTER TABLE GD_ORDER ADD CONSTRAINT GD_PK_ORDER PRIMARY KEY (ID);
ALTER TABLE GD_USER ADD CONSTRAINT GD_PK_USER PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE GD_ACTIONLOG ADD CONSTRAINT FK_GD_ACTIONLOG_USERKEY FOREIGN KEY (USERKEY) REFERENCES GD_USER (ID) ON UPDATE CASCADE;
ALTER TABLE GD_CHECKLOG ADD CONSTRAINT FK_GD_CHECKLOG_GOODKEY FOREIGN KEY (GOODKEY) REFERENCES GD_GOOD (ID) ON UPDATE CASCADE;
ALTER TABLE GD_CHECKLOG ADD CONSTRAINT FK_GD_CHECKLOG_ORDERKEY FOREIGN KEY (ORDERKEY) REFERENCES GD_ORDER (ID) ON UPDATE CASCADE;
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT FK_GD_EVENTLOG_CHECKLOGKEY FOREIGN KEY (CHECKLOGKEY) REFERENCES GD_CHECKLOG (ID) ON UPDATE CASCADE;
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT FK_GD_EVENTLOG_EVENTKEY FOREIGN KEY (EVENTKEY) REFERENCES GD_EVENT (ID) ON UPDATE CASCADE;
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT FK_GD_EVENTLOG_GOODLOGKEY FOREIGN KEY (GOODLOGKEY) REFERENCES GD_GOODLOG (ID) ON UPDATE CASCADE;
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT FK_GD_EVENTLOG_ORDERKEY FOREIGN KEY (ORDERKEY) REFERENCES GD_ORDER (ID) ON UPDATE CASCADE;
ALTER TABLE GD_EVENTLOG ADD CONSTRAINT FK_GD_EVENTLOG_USERKEY FOREIGN KEY (USERKEY) REFERENCES GD_USER (ID) ON UPDATE CASCADE;
ALTER TABLE GD_GOODLOG ADD CONSTRAINT FK_GD_GOODLOG_GOODKEY FOREIGN KEY (GOODKEY) REFERENCES GD_GOOD (ID) ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX GD_GOOD_IDX1 ON GD_GOOD (GOODKEY);
CREATE INDEX GD_ORDER_IDX1 ON GD_ORDER (ORDERKEY);
CREATE INDEX GD_USER_IDX1 ON GD_USER (USERKEY);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: GD_ACTIONLOG_BI */
CREATE TRIGGER GD_ACTIONLOG_BI FOR GD_ACTIONLOG
ACTIVE BEFORE INSERT POSITION 0
AS 
  BEGIN 
    IF (NEW.ID IS NULL) THEN 
      NEW.ID = GEN_ID(gd_g_unique, 1); 
  END
^

/* Trigger: GD_BI_EVENTLOG */
CREATE TRIGGER GD_BI_EVENTLOG FOR GD_EVENTLOG
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
   IF (NEW.ID IS NULL) THEN 
     NEW.ID = GEN_ID(gd_g_unique, 1); 
 END
^

/* Trigger: GD_BI_GOOD */
CREATE TRIGGER GD_BI_GOOD FOR GD_GOOD
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
   IF (NEW.ID IS NULL) THEN 
     NEW.ID = GEN_ID(gd_g_unique, 1); 
 END
^

/* Trigger: GD_BI_GOODLOG */
CREATE TRIGGER GD_BI_GOODLOG FOR GD_GOODLOG
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
   IF (NEW.ID IS NULL) THEN 
     NEW.ID = GEN_ID(gd_g_unique, 1); 
 END
^

/* Trigger: GD_BI_ORDER */
CREATE TRIGGER GD_BI_ORDER FOR GD_ORDER
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
   IF (NEW.ID IS NULL) THEN 
     NEW.ID = GEN_ID(gd_g_unique, 1); 
 END
^

/* Trigger: GD_BI_USER */
CREATE TRIGGER GD_BI_USER FOR GD_USER
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
   IF (NEW.ID IS NULL) THEN 
     NEW.ID = GEN_ID(gd_g_unique, 1); 
 END
^

/* Trigger: GD_CHECKLOG_BI */
CREATE TRIGGER GD_CHECKLOG_BI FOR GD_CHECKLOG
ACTIVE BEFORE INSERT POSITION 0
AS  
 BEGIN  
    IF (NEW.ID IS NULL) THEN  
      NEW.ID = GEN_ID(gd_g_unique, 1);  
 END
^

SET TERM ; ^



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON GD_ACTIONLOG TO ADMINISTRATOR;
GRANT ALL ON GD_CHECKLOG TO ADMINISTRATOR;
GRANT ALL ON GD_EVENT TO ADMINISTRATOR;
GRANT ALL ON GD_EVENTLOG TO ADMINISTRATOR;
GRANT ALL ON GD_GOOD TO ADMINISTRATOR;
GRANT ALL ON GD_GOODLOG TO ADMINISTRATOR;
GRANT ALL ON GD_ORDER TO ADMINISTRATOR;
GRANT ALL ON GD_USER TO ADMINISTRATOR;
GRANT SELECT ON RDB$FORMATS TO PUBLIC;
GRANT SELECT ON RDB$PAGES TO PUBLIC;
GRANT SELECT ON RDB$ROLES TO PUBLIC;
